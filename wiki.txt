Noviq Language Reference
=========================

1. Introduction
-------------
Noviq is a simple, interpreted programming language designed for readability and ease of use. 
It supports basic variable types and string formatting capabilities.

2. Variable System
----------------
Noviq supports four primary variable types:
a) Integers: Whole numbers (positive or negative)
   Syntax: variableName = number
   Example: count = 42

b) Strings: Text enclosed in quotes
   Syntax: variableName = "text" or variableName = 'text'
   Example: name = "John"

c) Floats: Decimal numbers
   Syntax: variableName = number.number
   Example: price = 42.99

d) Booleans: True/false values
   Syntax: variableName = true or variableName = false
   Example: isValid = true

3. Display System
---------------
The display command is used for output and supports multiple formats:

a) Direct Display:
   - Strings: display("text") or display('text')
   - Numbers: display(number)
   Example: display("Hello, World!")
           display(42)

b) Variable Display:
   Uses %var[n] format where n is the variable position (1-based)
   Syntax: display("%var1", variableName)
   Example: display("%var1", x)  // Shows value of x

c) Multiple Variable Display:
   Can combine multiple variables in one display
   Syntax: display("text %var1 more-text %var2", var1, var2)
   Example: display("Age: %var1, Name: %var2", age, name)

4. String Formatting System
------------------------
Noviq supports dynamic string creation using variables:

a) Basic Format:
   Syntax: result = ("format string", var1, var2, ...)
   Example: greeting = ("%var1, welcome!", name)

b) Multiple Variables:
   Can combine multiple variables in any order
   Example: info = ("%var1 is %var2 years old", name, age)

5. Syntax Rules
-------------
a) Variables:
   - Must start with letter or underscore
   - Can contain letters, numbers, underscores
   - Case-sensitive
   - No special characters or spaces

b) Strings:
   - Must use matching quotes ('' or "")
   - Cannot mix quote types
   - Can contain any characters

c) General:
   - One command per line
   - No line terminators (semicolons) needed
   - Whitespace is ignored except in strings
   - Empty lines are allowed

6. Error Handling
---------------
The interpreter provides specific errors for:
a) Syntax Violations:
   - Missing or mismatched quotes
   - Invalid variable names
   - Missing parentheses
   - Invalid number format

b) Runtime Errors:
   - Undefined variables
   - Invalid variable types
   - Format string errors
   - Memory allocation failures

Each error message includes the line number and details about the error.

7. Arithmetic Operations
---------------------
Noviq supports basic arithmetic operations for numbers:

a) Supported Operators:
   + Addition
   - Subtraction
   * Multiplication
   / Division
   // Floor Division
   % Modulus
   ** Exponentiation

b) Usage:
   Syntax: result = operand1 operator operand2
   Examples: 
   sum = 5 + 3
   diff = 10 - 4
   prod = 6 * 2
   quot = 15 / 3
   floor_div = 17 // 5    // Results in 3
   remainder = 17 % 5     // Results in 2
   power = 2 ** 3        // Results in 8

c) Rules:
   - Operands can be numbers or variables
   - Operations between different types (int/float) result in float
   - Division always produces float results
   - Division by zero produces an error

8. Logical Operations
------------------
Noviq supports basic logical operations:

a) Supported Operators:
   AND or && - Logical AND
   OR  or || - Logical OR
   NOT or !  - Logical NOT
   >   - Greater than
   <   - Less than
   >=  - Greater than or equal
   <=  - Less than or equal
   ==  - Equal to

b) Usage:
   Syntax: result = operand1 operator operand2
   Examples:
   isTrue = true AND false    // Results in false
   isTrue = true && false     // Results in false
   isTrue = true OR false     // Results in true
   isTrue = true || false     // Results in true
   isTrue = NOT true          // Results in false
   isTrue = !true            // Results in false

c) Type Conversion Rules:
   - Numbers: 0 is false, any other value is true
   - Strings: Empty string is false, non-empty is true
   - Booleans: Used directly
   - Results are always boolean type

9. Comments
---------
Noviq supports two types of comments:

a) Single-line Comments:
   Syntax: # comment text
   Example: x = 5 # This sets x to 5
   - Everything after # on a line is ignored
   - Can be used at the end of code lines
   - Can be used for full-line comments

b) Multi-line Comments:
   Syntax: ## text ##
   Example:
   ##
   This is a multi-line comment
   It can span multiple lines
   The interpreter ignores everything between the markers
   ##
   
   - Uses ## markers
   - Must be on lines by themselves (whitespace allowed)
   - Can span any number of lines
   - Cannot be nested
   - Useful for temporarily disabling blocks of code

c) Comment Rules:
   - Comments cannot be nested
   - Multi-line comment markers must be on their own lines
   - Single-line comments can appear anywhere on a line
   - Code after a comment marker on the same line is ignored
   - Comments do not affect line numbering for error reporting

10. Control Flow
-------------
Noviq supports basic control flow with if-else statements:

a) If Statement:
   Syntax:
   if(condition):
       statement(s)

b) If-Else Statement:
   Syntax:
   if(condition):
       statement(s)
   else:
       statement(s)

c) If-ElseIf-Else Statement:
   Syntax:
   if(condition1):
       statement(s)
   elseif(condition2):
       statement(s)
   else:
       statement(s)

d) Rules:
   - Conditions must be in parentheses
   - Block must be indented with spaces or tabs
   - Each block ends when indentation returns to previous level
   - Multiple elseif blocks are allowed
   - else block is optional
   - Supports all comparison and logical operators
